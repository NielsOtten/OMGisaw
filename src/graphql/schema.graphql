"""All input for the create `Sighting` mutation."""
input CreateSightingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Sighting` to be created by this mutation."""
  sighting: SightingInput!
}

"""The output of our create `Sighting` mutation."""
type CreateSightingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sighting` that was created by this mutation."""
  sighting: Sighting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Subject` that is related to this `Sighting`."""
  subjectBySubjectId: Subject

  """An edge for our `Sighting`. May be used by Relay 1."""
  sightingEdge(
    """The method to use when ordering `Sighting`."""
    orderBy: [SightingsOrderBy!] = PRIMARY_KEY_ASC
  ): SightingsEdge
}

"""All input for the create `Subject` mutation."""
input CreateSubjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Subject` to be created by this mutation."""
  subject: SubjectInput!
}

"""The output of our create `Subject` mutation."""
type CreateSubjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Subject` that was created by this mutation."""
  subject: Subject

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Subject`. May be used by Relay 1."""
  subjectEdge(
    """The method to use when ordering `Subject`."""
    orderBy: [SubjectsOrderBy!] = PRIMARY_KEY_ASC
  ): SubjectsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteSightingById` mutation."""
input DeleteSightingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSighting` mutation."""
input DeleteSightingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sighting` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Sighting` mutation."""
type DeleteSightingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sighting` that was deleted by this mutation."""
  sighting: Sighting
  deletedSightingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Subject` that is related to this `Sighting`."""
  subjectBySubjectId: Subject

  """An edge for our `Sighting`. May be used by Relay 1."""
  sightingEdge(
    """The method to use when ordering `Sighting`."""
    orderBy: [SightingsOrderBy!] = PRIMARY_KEY_ASC
  ): SightingsEdge
}

"""All input for the `deleteSubjectById` mutation."""
input DeleteSubjectByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSubjectBySlug` mutation."""
input DeleteSubjectBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""All input for the `deleteSubject` mutation."""
input DeleteSubjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Subject` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Subject` mutation."""
type DeleteSubjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Subject` that was deleted by this mutation."""
  subject: Subject
  deletedSubjectId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Subject`. May be used by Relay 1."""
  subjectEdge(
    """The method to use when ordering `Subject`."""
    orderBy: [SubjectsOrderBy!] = PRIMARY_KEY_ASC
  ): SubjectsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Sighting`."""
  createSighting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSightingInput!
  ): CreateSightingPayload

  """Creates a single `Subject`."""
  createSubject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSubjectInput!
  ): CreateSubjectPayload

  """Updates a single `Sighting` using its globally unique id and a patch."""
  updateSighting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSightingInput!
  ): UpdateSightingPayload

  """Updates a single `Sighting` using a unique key and a patch."""
  updateSightingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSightingByIdInput!
  ): UpdateSightingPayload

  """Updates a single `Subject` using its globally unique id and a patch."""
  updateSubject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubjectInput!
  ): UpdateSubjectPayload

  """Updates a single `Subject` using a unique key and a patch."""
  updateSubjectById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubjectByIdInput!
  ): UpdateSubjectPayload

  """Updates a single `Subject` using a unique key and a patch."""
  updateSubjectBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubjectBySlugInput!
  ): UpdateSubjectPayload

  """Deletes a single `Sighting` using its globally unique id."""
  deleteSighting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSightingInput!
  ): DeleteSightingPayload

  """Deletes a single `Sighting` using a unique key."""
  deleteSightingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSightingByIdInput!
  ): DeleteSightingPayload

  """Deletes a single `Subject` using its globally unique id."""
  deleteSubject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubjectInput!
  ): DeleteSubjectPayload

  """Deletes a single `Subject` using a unique key."""
  deleteSubjectById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubjectByIdInput!
  ): DeleteSubjectPayload

  """Deletes a single `Subject` using a unique key."""
  deleteSubjectBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubjectBySlugInput!
  ): DeleteSubjectPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Sighting`."""
  allSightings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sighting`."""
    orderBy: [SightingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SightingCondition
  ): SightingsConnection

  """Reads and enables pagination through a set of `Subject`."""
  allSubjects(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Subject`."""
    orderBy: [SubjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubjectCondition
  ): SubjectsConnection
  sightingById(id: Int!): Sighting
  subjectById(id: Int!): Subject
  subjectBySlug(slug: String!): Subject

  """Reads a single `Sighting` using its globally unique `ID`."""
  sighting(
    """The globally unique `ID` to be used in selecting a single `Sighting`."""
    nodeId: ID!
  ): Sighting

  """Reads a single `Subject` using its globally unique `ID`."""
  subject(
    """The globally unique `ID` to be used in selecting a single `Subject`."""
    nodeId: ID!
  ): Subject
}

type Sighting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String
  location: String!
  timestamp: Datetime!
  url: String
  subjectId: Int!

  """Reads a single `Subject` that is related to this `Sighting`."""
  subjectBySubjectId: Subject
}

"""
A condition to be used against `Sighting` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SightingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `subjectId` field."""
  subjectId: Int
}

"""An input for mutations affecting `Sighting`"""
input SightingInput {
  id: Int
  description: String
  location: String!
  timestamp: Datetime
  url: String
  subjectId: Int!
}

"""
Represents an update to a `Sighting`. Fields that are set will be updated.
"""
input SightingPatch {
  id: Int
  description: String
  location: String
  timestamp: Datetime
  url: String
  subjectId: Int
}

"""A connection to a list of `Sighting` values."""
type SightingsConnection {
  """A list of `Sighting` objects."""
  nodes: [Sighting]!

  """
  A list of edges which contains the `Sighting` and cursor to aid in pagination.
  """
  edges: [SightingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sighting` you could get from the connection."""
  totalCount: Int!
}

"""A `Sighting` edge in the connection."""
type SightingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sighting` at the end of the edge."""
  node: Sighting
}

"""Methods to use when ordering `Sighting`."""
enum SightingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LOCATION_ASC
  LOCATION_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  URL_ASC
  URL_DESC
  SUBJECT_ID_ASC
  SUBJECT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Subject implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  nickname: String!
  slug: String!
  picture: String
  description: String
  location: String
  createdAt: Datetime!

  """Reads and enables pagination through a set of `Sighting`."""
  sightingsBySubjectId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sighting`."""
    orderBy: [SightingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SightingCondition
  ): SightingsConnection!
}

"""
A condition to be used against `Subject` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SubjectCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `nickname` field."""
  nickname: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `picture` field."""
  picture: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""An input for mutations affecting `Subject`"""
input SubjectInput {
  id: Int
  name: String!
  nickname: String!
  slug: String!
  picture: String
  description: String
  location: String
  createdAt: Datetime
}

"""
Represents an update to a `Subject`. Fields that are set will be updated.
"""
input SubjectPatch {
  id: Int
  name: String
  nickname: String
  slug: String
  picture: String
  description: String
  location: String
  createdAt: Datetime
}

"""A connection to a list of `Subject` values."""
type SubjectsConnection {
  """A list of `Subject` objects."""
  nodes: [Subject]!

  """
  A list of edges which contains the `Subject` and cursor to aid in pagination.
  """
  edges: [SubjectsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Subject` you could get from the connection."""
  totalCount: Int!
}

"""A `Subject` edge in the connection."""
type SubjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Subject` at the end of the edge."""
  node: Subject
}

"""Methods to use when ordering `Subject`."""
enum SubjectsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NICKNAME_ASC
  NICKNAME_DESC
  SLUG_ASC
  SLUG_DESC
  PICTURE_ASC
  PICTURE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LOCATION_ASC
  LOCATION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateSightingById` mutation."""
input UpdateSightingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Sighting` being updated.
  """
  sightingPatch: SightingPatch!
  id: Int!
}

"""All input for the `updateSighting` mutation."""
input UpdateSightingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sighting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Sighting` being updated.
  """
  sightingPatch: SightingPatch!
}

"""The output of our update `Sighting` mutation."""
type UpdateSightingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sighting` that was updated by this mutation."""
  sighting: Sighting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Subject` that is related to this `Sighting`."""
  subjectBySubjectId: Subject

  """An edge for our `Sighting`. May be used by Relay 1."""
  sightingEdge(
    """The method to use when ordering `Sighting`."""
    orderBy: [SightingsOrderBy!] = PRIMARY_KEY_ASC
  ): SightingsEdge
}

"""All input for the `updateSubjectById` mutation."""
input UpdateSubjectByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Subject` being updated.
  """
  subjectPatch: SubjectPatch!
  id: Int!
}

"""All input for the `updateSubjectBySlug` mutation."""
input UpdateSubjectBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Subject` being updated.
  """
  subjectPatch: SubjectPatch!
  slug: String!
}

"""All input for the `updateSubject` mutation."""
input UpdateSubjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Subject` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Subject` being updated.
  """
  subjectPatch: SubjectPatch!
}

"""The output of our update `Subject` mutation."""
type UpdateSubjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Subject` that was updated by this mutation."""
  subject: Subject

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Subject`. May be used by Relay 1."""
  subjectEdge(
    """The method to use when ordering `Subject`."""
    orderBy: [SubjectsOrderBy!] = PRIMARY_KEY_ASC
  ): SubjectsEdge
}
